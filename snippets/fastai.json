{
    "Train Model": {
        "prefix": "fastai:train",
        "description": "Suggested training sequence by fast.ai",
        "body": [
            "learn.${1|fit(epochs\\, lr=default_lr\\, wd=None\\, callbacks=None),fit_one_cycle(cyc_len\\, max_lr=default_lr\\, moms=(0.95\\,0.85)\\, div_factor=25.\\, pct_start=0.3\\, wd=None\\, callbacks=None)|}",
            "learn.save('stage-1')",
            "learn.lr_find()",
            "learn.recorder.plot()",
            "learn.unfreeze()",
            "learn.${2|fit(epochs\\, lr=default_lr\\, wd=None\\, callbacks=None),fit_one_cycle(cyc_len\\, max_lr=default_lr\\, moms=(0.95\\,0.85)\\, div_factor=25.\\, pct_start=0.3\\, wd=None\\, callbacks=None)|}",
            "learn.save('stage-2')"
        ]
    },
    "Metric Template": {
        "prefix": "fastai:metric",
        "desription": "Creates a metric function template",
        "body": [
            "def ${1:metric}(y_pred: Tensor, y_true: Tensor):",
            "\treturn"
        ]
    },
    "Regression Metrics": {
        "prefix": "fastai:metric_reg",
        "desription": "Adds a regression metrics",
        "body": [
            "metrics = [${1|exp_rmspe|}]"
        ]
    },
    "Classification Metrics": {
        "prefix": "fastai:metric_class",
        "desription": "Adds a classification metrics",
        "body": [
            "metrics = [${1|accuracy,accuracy_thresh,dice,error_rate,fbeta|}]"
        ]
    },
    "Classification Loss": {
        "prefix": "fastai:loss_class",
        "desription": "Select a classification loss functione",
        "body": [
            "${1:learn}.loss = ${2|CrossEntropyFlat,nn.BCELoss,nn.BCEWithLogitsLoss,nn.CrossEntropyLoss,nn.MarginRankingLoss,nn.NLLLoss,nn.PoissonNLLLoss,nn.HingeEmbeddingLoss,nn.MultiLabelMarginLoss,nn.SoftMarginLoss,nn.MultiLabelSoftMarginLoss,nn.CosineEmbeddingLoss,nn.MultiMarginLoss,nn.TripletMarginLoss|}()"
        ]
    },
    "Regression Loss": {
        "prefix": "fastai:loss_reg",
        "desription": "Select a regression loss function",
        "body": [
            "${1:learn}.loss = ${2|MSELossFlat,nn.L1Loss,nn.MSELoss,nn.KLDivLoss,nn.SmoothL1Loss|}()"
        ]
    },
    "Optimizer": {
        "prefix": "fastai:optimizer",
        "desription": "Select an optimizer",
        "body":[
            "optimizer = optim.${1|Adadelta(,Adagrad(,Adam(,SparseAdam(,Adamax(,ASGD(,LBFGS(,RMSprop(,Rprop(,SGD(|}lr=${2:1e-2})"
        ]
    },
    "Vision Imports": {
        "prefix": "fastai:vision:imports",
        "description": "Imports the packages which are most required for computer vision tasks",
        "body": [
            "from fastai import *",
            "from fastai.vision import *"
        ]
    },
    "Image Transform": {
        "prefix": "fastai:vision:transform",
        "description": "Image transformation pipline",
        "body": [
            "tfms = get_transforms(do_flip=${1|True,False|}, flip_vert=${2|False,True|}, max_rotate=${3:10.}, max_zoom=${4:1.1}, max_lightning=${5:0.2}, max_warp=${6:0.2}, p_affine=${7:0.75}, p_lightning=${8:0.75})"
        ]
    },
    "Image Normalize Stats": {
        "prefix": "fastai:vision:stats",
        "description": "Select normalization stats",
        "body": [
            "${1|imagenet_stats,cifar_stats,mnist_stats,()|}"
        ]
    },
    "Image DataBlock": {
        "prefix": "fastai:vision:datablock",
        "description": "Creates a DataBlock for image data",
        "body": [
            "path = Path('${TM_DIRECTORY}') / '${1:data'}",
            "size = ${2:128}",
            "bs=${3:32}",
            "src = (${4|ImageFileList.from_folder(path),ImageSplitDatasets(path)|}",
            "\t.${5|label_from_folder(),label_from_df(df\\, fn_col\\, label_col),label_from_func(get_y_fn),label_from_re(pat)|}",
            "\t.${6|split_by_folder(train='train'\\, valid='valid'),random_split_by_pct(valid_pct=0.2),split_by_files(valid_names),split_by_fname_file(fname),split_by_idx(valid_idx),split_by_valid_func(func)|})",
            "data = (src.datasets(${7|ImageClassificationDataset,ImageMultiDataset,SegmentationDataset,PointsDataset,ObjectDataset|})",
            "\t.transform(tfms, size=size, tfm_y=False)",
            "\t.databunch(bs=bs).normalize(imagenet_stats))"
        ]
    },
    "Image DataBunch": {
        "prefix": "fastai:vision:databunch",
        "description": "Creates a DataBunch for image data",
        "body": [
            "img_path = Path('${TM_DIRECTORY}')",
            "bs=64",
            "size=224",
            "tfms=None",
            "ds_tfms=None",
            "",
            "data = ImageDataBunch.${1|create(path=img_path\\, train_ds=train_ds\\, valid_ds=valid_ds\\, test_ds=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_folder(path_img\\, train='train'\\, valid='valid'\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_df(path=img_path\\, df=df\\, folder='.'\\, sep=None\\, valid_pct=0.2\\, fn_col=0\\, label_col=1\\, test=None\\, suffix=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_csv(path:img_path\\, folder='.'\\, sep=None\\, csv_labels='labels.csv'\\, valid_pct=0.2\\, fn_col=0\\, label_col=1\\, test=None\\, suffix=None\\, header='infer'\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_lists(path=img_path\\, fnames=fnmaes\\, labels=labels\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_name_func(path=img_path\\, fnames=fnames\\, label_func=label_func\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_name_re(path=path_img\\, fnames=fnames\\, pat=pattern\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None)|}",
            "data.normalize(stats=${2|None,imagenet_stats,cifar_stats,mnist_stats,()|})"
        ]
    },
    "Image Classifier": {
        "prefix": "fastai:vision:classifier",
        "description": "Creates an ImageClassifier",
        "body": [
            "arch = ${1|None,models.resnet18,models.resnet34,models.resnet50,models.resnet101,models.resnet152,models.wrn_22|}",
            "custom_head = ${2|None,create_head(num_features\\, num_classes\\, lin_ftrs=None\\, ps=0.5)|}",
            "metrics = ${3|error_rate,accuracy,accuracy_thresh,dice|}",
            "learn = create_cnn(data, arch=arch, metrics=metrics,cut=None, pretrained=True, lin_ftrs=None, ps=0.5, custom_head=custom_head, split_on=None)"
        ]
    },
    "ImageClassifier Interpretation": {
        "prefix": "fastai:vision:interpreter",
        "description": "Creates an ImageClassifierInterpreter",
        "body": [
            "interp = ClassificationInterpretation${1|.from_learner(learn\\, tta=False),(data\\, probs\\, y_true\\, losses)|}",
            "interp.${2|top_losses(k=None\\, largest=True),plot_top_losses(k\\, largest=True\\, figsize=(12\\,12)),confusion_matrix(),plot_confusion_matrix(normalize=False\\, title'Confusion matrix'\\, cmap='Blues'\\, norm_dec=2),most_confused(min_val=1)|}"
        ]
    },
    "Image Classification": {
        "prefix": "fastai:vision:classification",
        "description": "Creates an image classification template",
        "body": [
            "from fastai import *",
            "from fastai.vision import *",
            "",
            "img_path = Path('${TM_DIRECTORY}')",
            "bs=64              # batch size",
            "size=224           # image size",
            "tfms=None          # transformations",
            "ds_tfms=None       # dataset transformations",
            "",
            "data = ImageDataBunch.${1|create(path=img_path\\, train_ds=train_ds\\, valid_ds=valid_ds\\, test_ds=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_folder(path_img\\, train='train'\\, valid='valid'\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_df(path=img_path\\, df=df\\, folder='.'\\, sep=None\\, valid_pct=0.2\\, fn_col=0\\, label_col=1\\, test=None\\, suffix=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_csv(path:img_path\\, folder='.'\\, sep=None\\, csv_labels='labels.csv'\\, valid_pct=0.2\\, fn_col=0\\, label_col=1\\, test=None\\, suffix=None\\, header='infer'\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_lists(path=img_path\\, fnames=fnmaes\\, labels=labels\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_name_func(path=img_path\\, fnames=fnames\\, label_func=label_func\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None),from_name_re(path=path_img\\, fnames=fnames\\, pat=pattern\\, valid_pct=0.2\\, test=None\\, size=size\\, bs=bs\\, ds_tfms=ds_tfms\\, tfms=tfms\\, num_workers=defaults.cpus\\, device=None)|}",
            "data.normalize(stats=${2|None,imagenet_stats,cifar_stats,mnist_stats,()|})",
            "",
            "arch = ${3|None,models.resnet18,models.resnet34,models.resnet50,models.resnet101,models.resnet152,models.wrn_22|}",
            "custom_head = ${4|None,create_head(num_features\\, num_classes\\, lin_ftrs=None\\, ps=0.5)|}",
            "metrics = ${5|error_rate,accuracy,accuracy_thresh,dice|}",
            "learn = create_cnn(data, arch=arch, metrics=metrics,cut=None, pretrained=True, lin_ftrs=None, ps=0.5, custom_head=custom_head, split_on=None)",
            "",
            "learn.${6|fit(epochs\\, lr=default_lr\\, wd=None\\, callbacks=None),fit_one_cycle(cyc_len\\, max_lr=default_lr\\, moms=(0.95\\,0.85)\\, div_factor=25.\\, pct_start=0.3\\, wd=None\\, callbacks=None)|}",
            "learn.save('stage-1')",
            "",
            "learn.lr_find()",
            "learn.recorder.plot()",
            "",
            "learn.unfreeze()",
            "learn.${7|fit(epochs\\, lr=default_lr\\, wd=None\\, callbacks=None),fit_one_cycle(cyc_len\\, max_lr=default_lr\\, moms=(0.95\\,0.85)\\, div_factor=25.\\, pct_start=0.3\\, wd=None\\, callbacks=None)|}",
            "learn.save('stage-2')",
            "",
            "interp = ClassificationInterpretation${8|.from_learner(learn\\, tta=False),(data\\, probs\\, y_true\\, losses)|}",
            "interp.${9|top_losses(k=None\\, largest=True),plot_top_losses(k\\, largest=True\\, figsize=(12\\,12)),confusion_matrix(),plot_confusion_matrix(normalize=False\\, title'Confusion matrix'\\, cmap'Blues'\\, norm_dec=2\\),most_confused(min_val=1)|}"
        ]
    },
    "Tabular Imports": {
        "prefix": "fastai:tabular:imports",
        "description": "Adds most important imports for tabular data tasks",
        "body": [
            "from fastai import *",
            "from fastai.tabular import *"
        ]
    },
    "Tabular DataBunch": {
        "prefix": "fastai:tabular:databunch",
        "description": "Creates a DataBuch for tabular data",
        "body": [
            "path = Path('${TM_DIRECTORY}') / '${1:data}'",
            "data = TabularDataBunch.from_df(path, ${2:train_df}, ${3:valid_df}, ${4:dep_var}, test_df=None, tfms=None, cat_names=None, cont_names=None, stats=None, log_output=False)"
        ]
    },
    "Tabular Learner": {
        "prefix": "fastai:tabular:learner",
        "description": "Creates a learner for tabular data",
        "body": [
            "metrics = ${1|error_rate,accuracy,accuracy_thresh,dice,exp_rmspe,fbeta|}",
            "emb_szs = ${2:\\{\\}}",
            "learn = create_tabular_learner(${3:data}, layers=${4:2}, emb_szs=emb_szs, metrics=metrics, ps=None, emb_drop=0., y_range=None, use_bn=True)"
        ]
    },
    "Text Imports": {
        "prefix": "fastai:text:imports",
        "description": "Adds most important imports for text data tasks",
        "body": [
            "from fastai import *",
            "from fastai.text import *"
        ]
    },
    "Text Dataset": {
        "prefix": "fastai:text:dataset",
        "description": "Creates a Dataset for NLP",
        "body": [
            "path = Path('${TM_DIRECTORY}') / '${1:data}'",
            "datasets = TextDataset${2|(df=None\\, create_mtd=TextMtd.DF\\, tokenizer=None,.from_ids(id_suff'_ids'\\, lbl_suff='_lbl'\\, itos='itos.pkl',.from_tokens(tok_suff='_tok'\\, lbl_suff='_lbl',.from_df(df\\, tokenizer=None,.from_one_folder(classes\\, tokenizer=None\\, suffle=True,.from_folder(classes=None\\, tokenizer=None\\, suffle=True|}, path=path, name='train', vocab:Vocab=None, max_vocab=60000, chunksize=10000,  min_freq=2, n_labels=1, txt_cols=None, label_cols=None, classes=None, clear_cache=False)"
        ]
    },
    "Text DataBunch": {
        "prefix": "fastai:text:databunch",
        "description": "Creates a DataBuch for NLP",
        "body": [
            "path = Path('${TM_DIRECTORY}') / '${1:data'}",
            "data = ${2|TextDataBunch,TextLMDataBunch,TextClasDataBunch|}.${3|create(datasets,from_ids(trn_ids\\, trn_lbls\\, val_ids\\, val_lbls\\, vocab_size\\, tst_ids=None\\, classes=None,from_id_files(train='train'\\, valid='valid'\\, test=None\\, itos='itos.pkl',from_tokens(train='train'\\, valid='valid'\\, test=None\\, vocab=None,from_df(train_df\\, valid_df\\, test_df=None\\, tokenizer=None\\, vocab=None,from_csv(train='train'\\, valid='valid'\\, tokenizer=None\\, test=None\\, vocab=None,from_folder(train'train'\\, valid='valid'\\, tokenizer=None\\, test=None\\, shuffle=True\\, vocab=None|}, path=path)"
        ]
    },
    "Text DataBlock": {
        "prefix": "fastai:text:datablock",
        "description": "Creates a DataBlock for NLP",
        "body": [
            "path = Path('${TM_DIRECTORY}') / '${1:data'}",
            "bs=${2:50}",
            "${3|data_lm = TextFileList.from_folder(path)",
            "\t.label_const(0)",
            "\t.datasets()",
            "\t.tokenize()",
            "\t.numericalize()",
            "\t.databunch(TextLMDataBunch\\, bs=bs),data_clas = TextFileList.from_folder(path)",
            "\t.label_from_folder(classes=['neg'\\, 'pos'])",
            "\t.split_by_folder(valid='test')",
            "\t.datasets()",
            "\t.tokenize()",
            "\t.numericalize(vocab=data_lm.vocab)",
            "\t.databunch(TextClasDataBunch\\, bs=bs)|}"
        ]
    },
    "Text Learner": {
        "prefix": "fastai:text:learner",
        "description": "Creates a learner for NLP",
        "body": [
            "learn = RNNLearner${2|(model\\, split_func=None\\, clip=None\\, adjust=False\\, alpha=2.\\, beta=1.,.language_model(emb_sz=400\\, nh=1150\\, nl=3\\, pad_token=1\\, drop_mult=1.\\, tie_weights=True\\, bias=True\\, qrnn=False\\, pretrained_model=None\\, pretrained_fnames=None,.classifier(max_len=70*20\\, emb_sz=400\\, nh=1150\\, nl=3\\, lin_ftrs=None\\, ps=None\\, pad_token=1\\, drop_mult=1.\\, qrnn=False|}, data=data, bptt=70)"
        ]
    },
    "Language Model": {
        "prefix": "fastai:text:lm-learner",
        "description": "Creates a language learner",
        "body": [
            "learn = language_model_learner(${1:data}, bptt=${2:70}, emb_sz=${3:400}, nh=${4:1150}, nl=${5:3})"
        ]
    },
    "Text Classifier": {
        "prefix": "fastai:text:clas-learner",
        "description": "Creates a text classifier",
        "body": [
            "learn = text_classifier_learner(${1:data}, bptt=${2:70}, emb_sz=${3:400}, nh=${4:1150}, nl=${5:3})"
        ]
    },
    "Collaborative Filtering Dataset": {
        "prefix": "fastai:colab:dataset",
        "description": "Creates a dataset for collaborative filtering",
        "body": [
            "datasets = CollabFilteringDataset${1|(user\\, item\\, ratings),.from_df(rating_df\\, pct_valt=0.2\\, user_name=None\\, item_name=None\\, rating_name=None),.from_csv(csv_name)|}"
        ]
    },
    "Collaborative Filtering Learner": {
        "prefix": "fastai:colab:learner",
        "description": "Creates a learner for collaborative filtering",
        "body": [
            "learn = get_collab_learner(${1:ratings}, ${2:n_factors}, user_name=${3:None}, item_name=${4:None}, rating_name=${5:None}, pct_val=0.2, test=None, metrics=None, min_score=None, max_score=None)"
        ]
    },
    "Cifar Example": {
        "prefix": "fastai:examples:cifar",
        "description": "Cifar code example",
        "body": [
            "from fastai import *",
            "from fastai.vision import *",
            "from fastai.vision.models.wrn import wrn_22",
            "",
            "torch.backends.cudnn.benchmark = True",
            "",
            "path = untar_data(URLs.CIFAR)",
            "ds_tfms = ([*rand_pad(4, 32), flip_lr(p=0.5)], [])",
            "data = ImageDataBunch.from_folder(path, valid='test', ds_tfms=ds_tfms, bs=512).normalize(cifar_stats)",
            "",
            "learn = Learner(data, wrn_22(), metrics=accuracy).to_fp16()",
            "learn.fit_one_cycle(30, 3e-3, wd=0.4, div_factor=10, pct_start=0.5)",
            "",
            "# with mixup",
            "learn = Learner(data, wrn_22(), metrics=accuracy).to_fp16().mixup()",
            "learn.fit_one_cycle(24, 3e-3, wd=0.2, div_factor=10, pct_start=0.5)"
        ]
    },
    "Colab Example": {
        "prefix": "fastai:examples:colab",
        "description": "Colaborative filtering code example",
        "body": [
            "from fastai import *          # Quick access to most common functionality",
            "from fastai.collab import *   # Quick access to collab filtering functionality",
            "",
            "path = untar_data(URLs.ML_SAMPLE)",
            "ratings = pd.read_csv(path/'ratings.csv')",
            "series2cat(ratings, 'userId', 'movieId')",
            "",
            "learn = get_collab_learner(ratings, n_factors=50, min_score=0., max_score=5.)",
            "learn.fit_one_cycle(4, 5e-3)"
        ]
    },
    "Dogs-Cats Example": {
        "prefix": "fastai:examples:dogs-cats",
        "description": "Dogs-cats code example",
        "body": [
            "from fastai import *",
            "from fastai.vision import *",
            "",
            "path = untar_data(URLs.DOGS)",
            "data = ImageDataBunch.from_folder(path, ds_tfms=get_transforms(), size=224).normalize(imagenet_stats)",
            "",
            "learn = create_cnn(data, models.resnet34, metrics=accuracy)",
            "learn.fit_one_cycle(1)",
            "",
            "learn.unfreeze()",
            "learn.fit_one_cycle(6, slice(1e-5,3e-4), pct_start=0.05)",
            "",
            "accuracy(*learn.TTA())"
        ]
    },
    "Adult Example": {
        "prefix": "fastai:examples:adult",
        "description": "Adult code example",
        "body": [
            "from fastai import *          # Quick access to most common functionality",
            "from fastai.tabular import *  # Quick access to tabular functionality",
            "",
            "path = untar_data(URLs.ADULT_SAMPLE)",
            "df = pd.read_csv(path/'adult.csv')",
            "train_df, valid_df = df[:-2000].copy(),df[-2000:].copy()",
            "",
            "dep_var = '>=50k'",
            "cat_names = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'native-country']",
            "data = TabularDataBunch.from_df(path, train_df, valid_df, dep_var,",
            "\t\t\t\t\t\t\t\ttfms=[FillMissing, Categorify], cat_names=cat_names)",
            "",
            "learn = get_tabular_learner(data, layers=[200,100], metrics=accuracy)",
            "learn.fit(1, 1e-2)"
        ]
    },
    "Imdb Example": {
        "prefix": "fastai:examples:imdb",
        "description": "Imdb code example",
        "body": [
            "from fastai import *        # Quick access to most common functionality",
            "from fastai.text import *   # Quick access to NLP functionality",
            "",
            "path = untar_data(URLs.IMDB_SAMPLE)",
            "df = pd.read_csv(path/'texts.csv', header=None)",
            "",
            "data_lm = TextLMDataBunch.from_csv(path, 'texts.csv')",
            "data_clas = TextClasDataBunch.from_csv(path, 'texts.csv', vocab=data_lm.train_ds.vocab, bs=42)",
            "",
            "learn = language_model_learner(data_lm, pretrained_model=URLs.WT103)",
            "learn.unfreeze()",
            "learn.fit(2, slice(1e-4,1e-2))",
            "",
            "learn.save_encoder('enc')",
            "",
            "learn = text_classifier_learner(data_clas)",
            "learn.load_encoder('enc')",
            "learn.fit(3, 1e-3)"
        ]
    },
    "Mnist Example": {
        "prefix": "fastai:examples:mnist",
        "description": "Mnist code example",
        "body": [
            "",
            "import fastai",
            "from fastai import *          # Quick access to most common functionality",
            "from fastai.vision import *   # Quick access to computer vision functionality",
            "",
            "path = untar_data(URLs.MNIST_SAMPLE)",
            "data = ImageDataBunch.from_folder(path, ds_tfms=(rand_pad(2, 28), []), bs=64)",
            "data.normalize(imagenet_stats)",
            "",
            "learn = create_cnn(data, models.resnet18, metrics=accuracy)",
            "learn.fit_one_cycle(1, 0.01)",
            "",
            "accuracy(*learn.get_preds())"
        ]
    }
}