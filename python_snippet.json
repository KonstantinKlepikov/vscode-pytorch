{
    "prefix": "pytorch:layer:bottleneck",
    "description": "Creates a Resnet bottleneck block",
    "body": [
        "import torch.nn as nn",
        "",
        "class Bottleneck(nn.Module):",
        "  # see https://pytorch.org/docs/0.4.0/_modules/torchvision/models/resnet.html ",
        "  def __init__(self, inplanes, planes, stride=1, downsample=None):",
        "\tsuper(Bottleneck, self).__init__()",
        "\tself.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, stride=stride, bias=False)",
        "\tself.bn1 = nn.BatchNorm2d(planes)",
        "\tself.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)",
        "\tself.bn2 = nn.BatchNorm2d(planes)",
        "\tself.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)",
        "\tself.bn3 = nn.BatchNorm2d(planes * 4)",
        "\tself.relu = nn.ReLU(inplace=True)",
        "",
        "  def forward(self, x):",
        "\tresidual = x",
        "\tout = self.conv1(x)",
        "\tout = self.bn1(out)",
        "\tout = self.relu(out)",
        "\tout = self.conv2(out)",
        "\tout = self.bn2(out)",
        "\tout = self.relu(out)",
        "\tout = self.conv3(out)",
        "\tout = self.bn3(out)",
        "\tout += residual",
        "\tout = self.relu(out)",
        "\treturn out"
    ]
}